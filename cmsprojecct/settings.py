"""
Django settings for cmsprojecct project.

Generated by 'djangocms' command using django CMS 4.1.4 and Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of Django settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/

For the list of django CMS settings and their values, see
https://docs.django-cms.org/en/release-4.1.x/reference/configuration.html
"""
# from allauth.socialaccount.models import SocialApp
# from django.apps import AppConfig
from decouple import config

SECRET_KEY = config("DJANGO_SECRET_KEY")
DEBUG = config("DEBUG", default=False, cast=bool)


import os
from pathlib import Path

from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-a^95wp$swdj=lw37!u50#+f&*#tr($k7&+$rcm)m9b1$nh5hsd')


# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = os.environ.get('DEBUG', 'False') == 'True'




ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    'hayat-it-com-059364823396.herokuapp.com',  # Heroku Subdomain
    'hayat.it.com',
    'employees.herokuapp.com',
    'www.hayat.it.com',
    'herokuapp.com',


]

# Application definition

INSTALLED_APPS = [
    'djangocms_admin_style',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.tiktok',
    'phonenumber_field',
     
     # CMS base apps
    'employees.apps.EmployeesConfig',
    'cms',
    'menus',
    'djangocms_snippet',
    'djangocms_text',
    'djangocms_alias',
    'djangocms_versioning',
    'storages',
    'reversion',

    'sekizai',
    'treebeard',
    'parler',
    'filer',
    'easy_thumbnails',
    'djangocms_frontend',
    'djangocms_frontend.contrib.accordion',
    'djangocms_frontend.contrib.alert',
    'djangocms_frontend.contrib.badge',
    'djangocms_frontend.contrib.card',
    'djangocms_frontend.contrib.carousel',
    'djangocms_frontend.contrib.collapse',
    'djangocms_frontend.contrib.content',
    'djangocms_frontend.contrib.grid',
    'djangocms_frontend.contrib.icon',
    'djangocms_frontend.contrib.image',
    'djangocms_frontend.contrib.jumbotron',
    'djangocms_frontend.contrib.link',
    'djangocms_frontend.contrib.listgroup',
    'djangocms_frontend.contrib.media',
    'djangocms_frontend.contrib.navigation',
    'djangocms_frontend.contrib.tabs',
    'djangocms_frontend.contrib.utilities',
    'cmsprojecct',
    
]

# class MyAppConfig(AppConfig):
#     name = 'cmsprojecct' 

#     def ready(self):
#         from django.db.utils import OperationalError, ProgrammingError
#         try:
#             # Google
#             google_app, _ = SocialApp.objects.get_or_create(provider="google")
#             google_app.client_id = config("GOOGLE_CLIENT_ID")
#             google_app.secret = config("GOOGLE_CLIENT_SECRET")
#             google_app.name = "Google Login"
#             google_app.save()

#             # Facebook
#             fb_app, _ = SocialApp.objects.get_or_create(provider="facebook")
#             fb_app.client_id = config("FACEBOOK_CLIENT_ID")
#             fb_app.secret = config("FACEBOOK_CLIENT_SECRET")
#             fb_app.name = "Facebook Login"
#             fb_app.save()

#             # TikTok
#             tiktok_app, _ = SocialApp.objects.get_or_create(provider="tiktok")
#             tiktok_app.client_id = config("TIKTOK_CLIENT_KEY")
#             tiktok_app.secret = config("TIKTOK_CLIENT_SECRET")
#             tiktok_app.name = "TikTok"
#             tiktok_app.save()

#         except (OperationalError, ProgrammingError):
#             pass










import os
import dj_database_url


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'cms.middleware.user.CurrentUserMiddleware',
    'cms.middleware.page.CurrentPageMiddleware',
    'cms.middleware.toolbar.ToolbarMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'cms.middleware.language.LanguageCookieMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    # 'cmsprojecct.middleware.LoginRequiredMiddleware',
]

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

ROOT_URLCONF = 'cmsprojecct.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, "cmsprojecct", "templates"),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.i18n',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'sekizai.context_processors.sekizai',
                'cms.context_processors.cms_settings',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

THUMBNAIL_PROCESSORS = (
    'easy_thumbnails.processors.colorspace',
    'easy_thumbnails.processors.autocrop',
    'filer.thumbnail_processors.scale_and_crop_with_subject_location',
    'easy_thumbnails.processors.filters',
)

WSGI_APPLICATION = 'cmsprojecct.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en'

LANGUAGES = [
    ("en", _("English")),
    # Add additional languages here
]

TIME_ZONE = 'UTC'

USE_I18N = True
USE_L10N = True
USE_THOUSAND_SEPARATOR = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

import os
from pathlib import Path
BASE_DIR = Path(__file__).resolve().parent.parent

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'cmsprojecct', 'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# This is a django CMS 4 template

CMS_CONFIRM_VERSION4 = True

# django CMS requires the site framework
# https://docs.django-cms.org/en/release-4.1.x/how_to/multi-site.html

SITE_ID = 1

# A base template is part of this setup
# https://docs.django-cms.org/en/release-4.1.x/reference/configuration.html#cms-templates

CMS_TEMPLATES = (
    ('home.html', _('Home page template')),
    ('employees/reels.html', _('reels page template')),
    
)

# Enable permissions
# https://docs.django-cms.org/en/release-4.1.x/topics/permissions.html

CMS_PERMISSION = True

# Allow admin sidebar to open admin URLs

X_FRAME_OPTIONS = 'SAMEORIGIN'

# Enable inline editing with djangocms-text
# https://github.com/django-cms/djangocms-text#inline-editing-feature

TEXT_INLINE_EDITING = True

# Allow deletion of version objects
# https://djangocms-versioning.readthedocs.io/en/latest/settings.html#DJANGOCMS_VERSIONING_ALLOW_DELETING_VERSIONS

DJANGOCMS_VERSIONING_ALLOW_DELETING_VERSIONS = True

# Add project-wide static files directory
# https://docs.djangoproject.com/en/5.1/ref/settings/#staticfiles-dirs


INTERNAL_IPS = [
    "127.0.0.1",
]


AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Keep this
    'allauth.account.auth_backends.AuthenticationBackend',  # Add this
]

ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = False
ACCOUNT_EMAIL_VERIFICATION = 'none'


CSRF_TRUSTED_ORIGINS = [
    'https://edf6-156-214-27-210.ngrok-free.app',  # Your ngrok URL
    'https://hayat.it.com',
    'https://www.hayat.it.com',
]


SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'email',
            'profile',
            'https://www.googleapis.com/auth/userinfo.email',
            'https://www.googleapis.com/auth/userinfo.profile',
            'https://www.googleapis.com/auth/youtube.readonly',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
            'prompt': 'consent',  # ← هذا مهم لإجبار Google على طلب الصلاحيات مرة أخرى
        },
    },

    'tiktok': {
        'SCOPE': ['user.info.basic'],
        'AUTH_PARAMS': {'access_type': 'online'},
    },

    # يمكنك لاحقًا إضافة facebook و apple أيضًا هنا
}


LOGIN_REDIRECT_URL = '/en/employeess/'
LOGOUT_REDIRECT_URL = '/'
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_LOGOUT_REDIRECT_URL = '/'


# Add project-wide static files directory
# https://docs.djangoproject.com/en/5.1/ref/settings/#media-root

MEDIA_URL = "/media/"
MEDIA_ROOT = str(BASE_DIR.parent / "media")


import dj_database_url

# Use SQLite by default (for development)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# If DATABASE_URL is set (like on Heroku), override with PostgreSQL settings
if 'DATABASE_URL' in os.environ:
    DATABASES['default'] = dj_database_url.config(
        conn_max_age=600,
        ssl_require=True
    )



import os
import sys

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}



ACCOUNT_ADAPTER = "employees.adapter.CustomAccountAdapter"



ACCOUNT_LOGIN_METHODS = {"email"}
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]


# Force allauth to store access tokens from Google
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_STORE_TOKENS = True

ACCOUNT_UNIQUE_EMAIL = True  # allows same email provider multiple times
SOCIALACCOUNT_QUERY_EMAIL = True